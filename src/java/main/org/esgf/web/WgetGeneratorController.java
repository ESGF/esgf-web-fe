package org.esgf.web;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;

import org.esgf.metadata.JSONException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


import org.apache.log4j.Logger;
/**
 * Implementation of a controller that generates wget scripts on the fly.  A request is sent from the front end to generate this script.  
 * Contained in its query string are the following parameters:
 * - id name of the dataset
 * - array of the individual file names contained in the batch of files requested for download
 * - a 'create' or 'delete' query variable (in lieu of http PUT and DELETE) 
 * 
 * 
 * @author john.harney
 *
 */
@Controller
@RequestMapping("/wgetproxy")
public class WgetGeneratorController {

    private final static Logger LOG = Logger.getLogger(WgetGeneratorController.class);
    
    //hard coded file location for where the wget script is temporarily stored - will need to change this later
    private final static String WGET_FILE_LOCATION = System.getProperty("java.io.tmpdir");
    
    
        //
        //The wget file is primarily created through the post method
        @RequestMapping(method=RequestMethod.GET)
        public @ResponseBody String doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, JSONException, ParserConfigurationException {
            LOG.debug("doGet wgetproxy");
            return createWGET(request, response);
        }
        
        
        @RequestMapping(method=RequestMethod.POST)
        public @ResponseBody String doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, JSONException, ParserConfigurationException {
            LOG.debug("doPost wgetproxy");
            
            
            
            if(request.getParameter("type").equals("create")) {
             
                return createWGET(request, response);
            }
            else {
                return deleteWGET(request,response);
            }
        }
        
        
        private String createWGET(HttpServletRequest request, HttpServletResponse response) throws IOException, JSONException, ParserConfigurationException {
            
            
            File wgetFile;
            wgetFile=new File(WGET_FILE_LOCATION + "wget_download_" + request.getParameter("id") + ".sh");
            
            wgetFile.createNewFile();
            LOG.debug("New file " + wgetFile.getName() + " has been created to the current directory");
            
            Writer output = null;

            String wgetText = "#!/bin/sh\n";
            
            wgetText += "# ESG Federation download script\n";
            wgetText += "#\n";
            wgetText += "# Template version: 0.2\n";
            wgetText += "# Generated by the all new ESGF Gateway\n";
            wgetText += "#";
            wgetText += "##############################################################################\n\n\n";
            
            wgetText += "download() {\n";
            
            for(int i=0;i<request.getParameterValues("child_url").length;i++) {
                wgetText += "\twget '" + request.getParameterValues("child_url")[i] + "'\n";
            }
            
            wgetText += "}\n";
            wgetText += "#\n# MAIN \n#\n";
            wgetText += "download\n";
            
            output = new BufferedWriter(new FileWriter(wgetFile));
            output.write(wgetText);
            output.close();
            LOG.debug("Your file has been written");  
        
            return "createWGET";
            
        }
        
        private String deleteWGET(HttpServletRequest request, HttpServletResponse response) throws IOException, JSONException, ParserConfigurationException {
            File wgetFile =new File(WGET_FILE_LOCATION + "wget_download_" + request.getParameter("id") + ".sh");
            if(!wgetFile.exists()){
                LOG.debug("File " + wgetFile.getName() + " doesn't exist");
            }
            else
            {
                LOG.debug("File " + wgetFile.getName() + " has been deleted");
                wgetFile.delete();
            }
            return "deleteWGET";
            
        }
        
        private void queryStringInfo(HttpServletRequest request) {
            LOG.debug("Query parameters");
            LOG.debug("\tId");
            LOG.debug("\t\t" + request.getParameterValues("id")[0]);
            LOG.debug("\tType");
            LOG.debug("\t\t" + request.getParameterValues("type")[0]);
            LOG.debug("\tChild urls");
            for(int i=0;i<request.getParameterValues("child_url").length;i++) {
                LOG.debug("\t\t" + request.getParameterValues("child_url")[i]);
            }
            LOG.debug("\tChild ids");
            for(int i=0;i<request.getParameterValues("child_id").length;i++) {
                LOG.debug("\t\t" + request.getParameterValues("child_id")[i]);
            }
        }
    
}
